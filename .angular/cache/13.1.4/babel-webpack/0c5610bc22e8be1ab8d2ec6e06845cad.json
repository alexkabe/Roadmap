{"ast":null,"code":"import _asyncToGenerator from \"/home/alex/Documents/Projets/Roadmap/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-spinner\";\nexport class DataBase {\n  constructor(http, spinner) {\n    this.http = http;\n    this.spinner = spinner; // URL = \"https://restcountries.com/v3.1/all\";\n\n    this.URL = \"https://roadmapsaf.herokuapp.com/saf/\";\n  } //Cette partie est resevee a \n\n\n  getUsers() {\n    return this.http.get(`${this.URL}listuser`);\n  }\n\n  getPublications() {\n    return this.http.get(`${this.URL}listpublication`);\n  }\n\n  loginUser(user) {\n    return this.http.post(this.URL, user);\n  }\n\n  isLoggedIn() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let tag = yield _this.http.post(`${_this.URL}login`, _this.user).subscribe(data => {\n        return data;\n      });\n      tag.closed;\n    })();\n  }\n\n  addPublication(point) {\n    let point2 = {\n      \"data\": point.data,\n      \"user\": 2\n    };\n    return this.http.post(`${this.URL}addPublication`, point2);\n  }\n\n  dropPont() {}\n\n  updatePoint() {}\n\n}\n\nDataBase.ɵfac = function DataBase_Factory(t) {\n  return new (t || DataBase)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NgxSpinnerService));\n};\n\nDataBase.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataBase,\n  factory: DataBase.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/home/alex/Documents/Projets/Roadmap/src/app/services/database.ts"],"names":["i0","i1","i2","DataBase","constructor","http","spinner","URL","getUsers","get","getPublications","loginUser","user","post","isLoggedIn","tag","subscribe","data","closed","addPublication","point","point2","dropPont","updatePoint","ɵfac","DataBase_Factory","t","ɵɵinject","HttpClient","NgxSpinnerService","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,aAApB;AACA,OAAO,MAAMC,QAAN,CAAe;AAClBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,OAAP,EAAgB;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf,CAFuB,CAGvB;;AACA,SAAKC,GAAL,GAAW,uCAAX;AACH,GANiB,CAOlB;;;AACAC,EAAAA,QAAQ,GAAG;AACP,WAAO,KAAKH,IAAL,CAAUI,GAAV,CAAe,GAAE,KAAKF,GAAI,UAA1B,CAAP;AACH;;AACDG,EAAAA,eAAe,GAAG;AACd,WAAO,KAAKL,IAAL,CAAUI,GAAV,CAAe,GAAE,KAAKF,GAAI,iBAA1B,CAAP;AACH;;AACDI,EAAAA,SAAS,CAACC,IAAD,EAAO;AACZ,WAAO,KAAKP,IAAL,CAAUQ,IAAV,CAAe,KAAKN,GAApB,EAAyBK,IAAzB,CAAP;AACH;;AACKE,EAAAA,UAAU,GAAG;AAAA;;AAAA;AACf,UAAIC,GAAG,SAAS,KAAI,CAACV,IAAL,CAAUQ,IAAV,CAAgB,GAAE,KAAI,CAACN,GAAI,OAA3B,EAAmC,KAAI,CAACK,IAAxC,EAA8CI,SAA9C,CAAwDC,IAAI,IAAI;AAC5E,eAAOA,IAAP;AACH,OAFe,CAAhB;AAGAF,MAAAA,GAAG,CAACG,MAAJ;AAJe;AAKlB;;AACDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,QAAIC,MAAM,GAAG;AACT,cAAQD,KAAK,CAACH,IADL;AAET,cAAQ;AAFC,KAAb;AAIA,WAAO,KAAKZ,IAAL,CAAUQ,IAAV,CAAgB,GAAE,KAAKN,GAAI,gBAA3B,EAA4Cc,MAA5C,CAAP;AACH;;AACDC,EAAAA,QAAQ,GAAG,CACV;;AACDC,EAAAA,WAAW,GAAG,CACb;;AAjCiB;;AAmCtBpB,QAAQ,CAACqB,IAAT,GAAgB,SAASC,gBAAT,CAA0BC,CAA1B,EAA6B;AAAE,SAAO,KAAKA,CAAC,IAAIvB,QAAV,EAAoBH,EAAE,CAAC2B,QAAH,CAAY1B,EAAE,CAAC2B,UAAf,CAApB,EAAgD5B,EAAE,CAAC2B,QAAH,CAAYzB,EAAE,CAAC2B,iBAAf,CAAhD,CAAP;AAA4F,CAA3I;;AACA1B,QAAQ,CAAC2B,KAAT,GAAiB,aAAc9B,EAAE,CAAC+B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE7B,QAAT;AAAmB8B,EAAAA,OAAO,EAAE9B,QAAQ,CAACqB,IAArC;AAA2CU,EAAAA,UAAU,EAAE;AAAvD,CAAtB,CAA/B","sourcesContent":["import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-spinner\";\nexport class DataBase {\n    constructor(http, spinner) {\n        this.http = http;\n        this.spinner = spinner;\n        // URL = \"https://restcountries.com/v3.1/all\";\n        this.URL = \"https://roadmapsaf.herokuapp.com/saf/\";\n    }\n    //Cette partie est resevee a \n    getUsers() {\n        return this.http.get(`${this.URL}listuser`);\n    }\n    getPublications() {\n        return this.http.get(`${this.URL}listpublication`);\n    }\n    loginUser(user) {\n        return this.http.post(this.URL, user);\n    }\n    async isLoggedIn() {\n        let tag = await this.http.post(`${this.URL}login`, this.user).subscribe(data => {\n            return data;\n        });\n        tag.closed;\n    }\n    addPublication(point) {\n        let point2 = {\n            \"data\": point.data,\n            \"user\": 2\n        };\n        return this.http.post(`${this.URL}addPublication`, point2);\n    }\n    dropPont() {\n    }\n    updatePoint() {\n    }\n}\nDataBase.ɵfac = function DataBase_Factory(t) { return new (t || DataBase)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.NgxSpinnerService)); };\nDataBase.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: DataBase, factory: DataBase.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}